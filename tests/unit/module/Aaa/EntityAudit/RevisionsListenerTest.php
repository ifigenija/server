<?php

namespace Aaa\EntityAudit;

use PHPUnit_Framework_TestCase;
use Tip\Bootstrap;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-18 at 14:12:17.
 */
class RevisionsListenerTest
    extends \AbstractTest
{

    /**
     * @var \Doctrine\Common\EventManager
     */
    protected $evm;

    /**
     * @var \Aaa\EntityEvents\RevisionsListener
     */
    protected $rev;

    /**
     * @var \Aaa\Repository\Revizije
     */
    protected $rep;

    public function _before()
    {

        $this->evm = $this->em->getEventManager();

        $role = new \Aaa\Entity\Role();
        $role->setName('console');
        $user = new \Aaa\Entity\User();
        $user->setId('bedcb99b-3716-41b4-bb86-83637ca60c3c');
        $user->setUsername('console');
        $user->getRoles()->add($role);


        $this->rev = new \Aaa\EntityEvents\RevisionsListener($this->sm, $user);
        $this->rep = $this->em->getRepository('Aaa\Entity\Revizija');
        $this->evm->addEventSubscriber($this->rev);
    }

    public function _after($removeL = true)
    {
        if ($removeL)
            $this->evm->removeEventSubscriber($this->rev);

        // to-do: odstrani le dodane
        $this->em->createQuery("DELETE Aaa\Entity\Revizija")->execute();
        $this->em->createQuery("DELETE Aaa\Entity\User u WHERE u.username IN ('janez','metka','marjan')")->execute();
        $this->em->createQuery("DELETE Aaa\Entity\Group g WHERE g.name IN ('moski','zenske','zaposleni')")->execute();
        $this->em->createQuery("DELETE Tip\Entity\Tehen t WHERE t.naziv LIKE 'revTestTeh%'")->execute();
        $this->em->createQuery("DELETE Tip\Entity\Klasifikacija k WHERE k.naziv LIKE 'revTestKlas%'")->execute();
    }

    public function testInsert()
    {
        $this->_after(false);

        $janez = $this->addUser('janez');
        $this->em->flush();

        $janezRev = $this->getLastRevision($janez->getId());
        $this->assertNotNull($janezRev, 'Revizija mora obstajati.');

        $data = $janezRev->getData();
        $this->assertEquals('INS', $janezRev->getTip(), 'Tip revizije mora biti INS.');
        $this->assertEmpty($data, 'Revizija mora biti prazna.');
    }

    public function testUpdate()
    {
        $janez = $this->addUser('janez');
        $this->em->flush();

        $janez->setUsername('marjan');
        $janez->setName('marjanIme');
        $this->em->persist($janez);
        $this->em->flush();

        $janezRev = $this->getLastRevision($janez);
        $data = $janezRev->getData();

        $this->assertEquals('UPD', $janezRev->getTip(), 'Tip revizije mora biti UPD');

        $this->assertEquals(
            array('janez', 'marjan'), $this->getArrayValue($data, 'username'), 'Username revizije se mora ujemati.'
        );
        $this->assertEquals(
            array('janezIme', 'marjanIme'), $this->getArrayValue($data, 'name'), 'Name revizije se mora ujemati.'
        );

        $this->assertCount(2, $data, 'Revizija mora imeti pravilno število sprememb.');
    }

    public function testDelete()
    {
        $janez = $this->addUser('janez');
        $this->em->flush();

        $this->em->remove($janez);
        $this->em->flush();

        $janezRev = $this->getLastRevision($janez);
        $this->assertEquals('DEL', $janezRev->getTip(), 'Tip revizije mora biti DEL.');

        $meta = $this->em->getClassMetadata(get_class($janez));
        $fields = $meta->getFieldNames();
        $entityData = $janez->getArrayCopy();
        $revisionData = $janezRev->getData();

        foreach ($fields as $field) {
            $this->assertEquals($entityData[$field], $revisionData[$field], "Polje '$field' revizije mora biti enako kot v entiteti.");
        }
    }

    public function testIgnoredFields()
    {
        $tehen = $this->addTehen('revTestTeh');
        $tehen->statusTee = 'N';

        $this->em->persist($tehen);
        $this->em->flush();

        // spremenimo ignorirano in neignorirano polje
        $tehen->statusTee = 'D';
        $tehen->sifra = 'revTestTeh2';
        $this->em->flush();

        $tehenRev = $this->getLastRevision($tehen);

        $this->assertEquals(
            array('revTestTeh', 'revTestTeh2'), $this->getArrayValue($tehenRev->getData(), 'sifra'), 'Polje sifra mora biti spremenjeno.'
        );
        $this->assertEquals(
            null, $this->getArrayValue($tehenRev->getData(), 'statusTee'), 'Polje statusTee mora biti ignorirano.'
        );

        // spremenimo samo ignorirano polje
        $tehen->statusTee = 'N';
        $this->em->flush();

        $tehenRev2 = $this->getLastRevision($tehen);

        $this->assertEquals($tehenRev->getId(), $tehenRev2->getId(), 'Ne sme biti sprememb.');
    }

    public function testMnogoProtiEna()
    {
        $tehen = $this->addTehen('revTestTeh');
        $klas = $this->addKlasifikacija('revTestKlas', '1234');
        $this->em->flush();

        // dodamo klasifikacijo
        $tehen->setKlasifikacija($klas);
        $this->em->flush();

        $revTehen = $this->getLastRevision($tehen);
        $this->assertEquals(
            array(null, $klas->getId()), $this->getArrayValue($revTehen->getData(), 'klasifikacija'), 'Dodana klasifikacija se mora ujemati.'
        );

        // menjamo klasifikacijo
        $klas2 = $this->addKlasifikacija('revTestKlas2', '1235');
        $tehen->setKlasifikacija($klas2);
        $this->em->flush();

        $revTehen2 = $this->getLastRevision($tehen);
        $this->assertEquals(
            array($klas->getId(), $klas2->getId()), $this->getArrayValue($revTehen2->getData(), 'klasifikacija'), 'Spremenjena klasifikacija se mora ujemati.'
        );

        // odstranimo klasifikacijo
        $tehen->setKlasifikacija(null);
        $this->em->flush();

        $revTehen3 = $this->getLastRevision($tehen);
        $this->assertEquals(
            array($klas2->getId(), null), $this->getArrayValue($revTehen3->getData(), 'klasifikacija'), 'Odstranjena klasifikacija se mora ujemati.'
        );
    }

    // M:N relacije še neobstoječih entitet
    public function testMnogoMnogoNoviEntieti()
    {
        $janez = $this->addUser('janez');
        $metka = $this->addUser('metka');
        $moski = $this->addGroup('moski');
        $zenske = $this->addGroup('zenske');

        $moski->getUsers()->add($janez);
        $zenske->getUsers()->add($metka);
        $this->em->flush();

        $janezRev = $this->getLastRevision($janez);
        $metkaRev = $this->getLastRevision($metka);
        $moskiRev = $this->getLastRevision($moski);
        $zenskeRev = $this->getLastRevision($zenske);

        // inserti morajo biti prazni
        $this->assertEmpty($janezRev->getData(), 'Revizija mora biti prazna.');
        $this->assertEmpty($metkaRev->getData(), 'Revizija mora biti prazna.');
        $this->assertEmpty($moskiRev->getData(), 'Revizija mora biti prazna.');
        $this->assertEmpty($zenskeRev->getData(), 'Revizija mora biti prazna.');
    }

    // M:N relacije z že obstoječo entiteto na eni strani
    public function testMnogoMnogoEnaObstojecaEntiteta()
    {
        $janez = $this->addUser('janez');
        $metka = $this->addUser('metka');
        $moski = $this->addGroup('moski');
        $zenske = $this->addGroup('zenske');

        $moski->getUsers()->add($janez);
        $zenske->getUsers()->add($metka);
        $this->em->flush();

        // nov uporabnik v obstoječo skupino
        $marjan = $this->addUser('marjan');
        $moski->getUsers()->add($marjan);

        //obstoječi uporabnik v novo skupino
        $zaposleni = $this->addGroup('zaposleni');
        $zaposleni->getUsers()->add($metka);
        $this->em->flush();

        $marjanRev = $this->getLastRevision($marjan);
        $moskiRev = $this->getLastRevision($moski);
        $zaposleniRev = $this->getLastRevision($zaposleni);
        $metkaRev = $this->getLastRevision($metka);

        // inserti morajo biti prazni
        $this->assertEmpty($marjanRev->getData(), 'Revizija mora biti prazna.');
        $this->assertEmpty($zaposleniRev->getData(), 'Revizija mora biti prazna.');

        // updejti morajo biti pravilni
        $this->assertEquals(
            array(array('+', $marjan->getId())), $this->getArrayValue($moskiRev->getData(), 'users'), 'Dodan uporabnik se mora ujemati.'
        );
        $this->assertEquals(
            array(array('+', $zaposleni->getId())), $this->getArrayValue($metkaRev->getData(), 'groups'), 'Dodan uporabnik se mora ujemati.'
        );
    }

    // M:N relacije z že obstoječima entitetama na obeh straneh
    public function testMnogoMnogoObeObstojeciEntiteti()
    {
        $janez = $this->addUser('janez');
        $metka = $this->addUser('metka');
        $zaposleni = $this->addGroup('zaposleni');
        $zaposleni->getUsers()->add($metka);
        $this->em->flush();

        $zaposleni->getUsers()->add($janez);
        $zaposleni->getUsers()->removeElement($metka);
        $this->em->flush();

        $zaposleniRev = $this->getLastRevision($zaposleni);
        $janezRev = $this->getLastRevision($janez);
        $metkaRev = $this->getLastRevision($metka);

        // updejti morajo biti pravilni
        $this->assertEquals(
            array(
            array('+', $janez->getId()),
            array('-', $metka->getId())
            ), $this->getArrayValue($zaposleniRev->getData(), 'users'), 'Dodana uporabnika se morata ujemati.'
        );
        $this->assertEquals(
            array(array('+', $zaposleni->getId())), $this->getArrayValue($janezRev->getData(), 'groups'), 'Dodana skupina se mora ujemati.'
        );
        $this->assertEquals(
            array(array('-', $zaposleni->getId())), $this->getArrayValue($metkaRev->getData(), 'groups'), 'Odstranjena skupina se mora ujemati.'
        );
    }

    protected function getLastRevision($objectId)
    {
        return $this->rep->findBy(array('objectId' => $objectId), array('id' => 'DESC'), 1)[0];
    }

    protected function addUser($name)
    {
        $user = new \Aaa\Entity\User();
        $user->setUsername($name);
        $user->setName("{$name}Ime");
        $user->setSurname("{$name}Priimek");
        $user->setPassword($name);
        $user->setEmail("{$name}@example.com");
        $user->setEnabled(true);

        $this->em->persist($user);
        return $user;
    }

    protected function addGroup($name)
    {
        $group = new \Aaa\Entity\Group();
        $group->setName($name);

        $this->em->persist($group);
        return $group;
    }

    protected function addTehen($name)
    {
        $tehen = new \Tip\Entity\Tehen();
        $tehen->setAktivna('D');
        $tehen->setSifra($name);
        $tehen->setNaziv($name);

        $this->em->persist($tehen);
        return $tehen;
    }

    protected function addKlasifikacija($name, $sifra)
    {
        $klas = new \Tip\Entity\Klasifikacija();
        $klas->setUpor('test');
        $klas->setNaziv($name);
        $klas->setSifra($sifra);
        $klas->setTipm('M');
        $klas->setEm('KOM');
        $klas->setTarifa('D3');
        $klas->setKonton('asdf');
        $klas->setKontop('asdf');
        $klas->setKonto('asdf');
        $klas->setNeVrac('D');
        $klas->setVIzd('D');
        $klas->setJeRez('D');
        $klas->setCats('1234');
        $klas->setKomercialni($name);

        $this->em->persist($klas);
        $klas->setParent(null);
        return $klas;
    }

    protected function getArrayValue($array, $key)
    {
        return array_key_exists($key, $array) ? $array[$key] : null;
    }

}
