<?php

/*
 *  Licenca GPLv3
 */

namespace Koledar\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator;

/**
 * Description of Gostovanja
 *
 * @author rado
 */
class Gostovanja
        extends \Max\Repository\AbstractMaxRepository
{

    protected $sortOptions = [
        "default" => [
            "vrsta" => ["alias" => "p.vrsta"]
        ],
        "vse"     => [
            "vrsta" => ["alias" => "p.vrsta"]
        ],
    ];

    public function getPaginator(array $options, $name = "default")
    {
        switch ($name) {
            case "default":
            case "vse":
                $qb   = $this->getVseQb($options);
                $sort = $this->getSort($name);
                $qb->orderBy($sort->order, $sort->dir);
                return new DoctrinePaginator(new Paginator($qb));
        }
    }

    public function getVseQb($options)
    {
        $qb = $this->createQueryBuilder('p');
        $e  = $qb->expr();
        if (!empty($options['q'])) {

            $naslov = $e->like('p.vrsta', ':vrsta');

            $qb->andWhere($e->orX($naslov));

            $qb->setParameter('vrsta', "{$options['q']}%", "string");
        }

        return $qb;
    }

    /**
     * Opravila pri ustvarjanju nove entitete
     *
     * @param Gostovanje $object
     * @param Parameters $params
     */
    public function create($object, $params = null)
    {
        if (!empty($params['dogodek'])) {
            $this->expect(is_array($params['dogodek']), "Parameter dogodek mora biti array id-jev", 1001950);
            $dogodekIds = $params['dogodek'];
            $dogR       = $this->getEntityManager()->getRepository('Koledar\Entity\Dogodek');
            /*
             * dodam podrejene dogodke
             */
            foreach ($dogodekIds as $dogId) {
                $dog = $dogR->findOneById($dogId);
                $this->expect($dog, "Dogodek ($dogId) ne obstaja", 1001951);

                 /*
                 * da ni težave v expectu
                 */
                $dogGostovanjeId = $dog->getNadrejenoGostovanje() ? $dog->getNadrejenoGostovanje()->getId() : ""; 

                $this->expect(!$dog->getNadrejenoGostovanje()
                        , "Dogodek ($dogId) že obstaja v drugem gostovanju ("
                        . $dogGostovanjeId. ")", 1001952);
                $dog->setNadrejenoGostovanje($object);
                $object->getPodrejeniDogodki()->add($dog);
            }
        }

        if ($object->dogodek) {
            /** @var Dogodki $rep */
            $rep = $this->getEntityManager()->getRepository('Koledar\Entity\Dogodek');
            $rep->create($object->getDogodek(), $params);
        }
        parent::create($object, $params);
    }

    /**
     * 
     * @param type $object
     * @param type $params
     */
    public function update($object, $params = null)
    {
        if ($object->dogodek) {
            /** @var Dogodki $rep */
            $rep = $this->getEntityManager()->getRepository('Koledar\Entity\Dogodek');
            $rep->update($object->getDogodek(), $params);
        }
        parent::update($object, $params); // TODO: Change the autogenerated stub      
    }

    /**
     * Pri brisanju brišem tudi dogodek
     *
     * @param Predstava $object
     */
    public function delete($object)
    {
        /*
         * izbriši to gostovanje v podrejenih dogodkih
         */
        foreach ($object->getPodrejeniDogodki() as $dog) {
            $dog->setNadrejenoGostovanje(null);
        }

        parent::delete($object);
        $this->getEntityManager()->remove($object->getDogodek());
    }

}
