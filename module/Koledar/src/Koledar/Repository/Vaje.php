<?php

/*
 *  Licenca GPLv3
 */

namespace Koledar\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use DoctrineORMModule\Paginator\Adapter\DoctrinePaginator;
use Max\Repository\AbstractMaxRepository;

/**
 * Description of Vaje
 *
 * @author rado
 */
class Vaje
        extends AbstractMaxRepository
{

    protected $sortOptions = [
        "default" => [
            "zaporedna" => ["alias" => "p.zaporedna"]
        ],
        "vse"     => [
            "zaporedna" => ["alias" => "p.zaporedna"]
        ]
    ];

    public function getPaginator(array $options, $name = "default")
    {
        switch ($name) {
//            case "default":
            case "vse":
                $qb   = $this->getVseQb($options);
                $sort = $this->getSort($name);
                $qb->orderBy($sort->order, $sort->dir);
                return new DoctrinePaginator(new Paginator($qb));
            case "default":
                $this->expect(!empty($options['uprizoritev']), "Uprizoritev je obvezna", 770151);
                $qb   = $this->getVseQb($options);
                $sort = $this->getSort($name);
                $qb->orderBy($sort->order, $sort->dir);
                return new DoctrinePaginator(new Paginator($qb));
        }
    }

    public function getVseQb($options)
    {
        $qb = $this->createQueryBuilder('p');
        $e  = $qb->expr();
        if (!empty($options['q'])) {
            $naz = $e->like('p.zaporedna', ':zaporedna');
            $qb->andWhere($e->orX($naz));
            $qb->setParameter('zaporedna', "{$options['q']}%", "string");
        }
        if (!empty($options['uprizoritev'])) {
            $qb->join('p.uprizoritev', 'uprizoritev');
            $naz = $e->eq('uprizoritev.id', ':upr');
            $qb->andWhere($naz);
            $qb->setParameter('upr', "{$options['uprizoritev']}", "string");
        }
        return $qb;
    }

    /**
     * Opravila pri ustvarjanju nove entitete
     *
     * @param Vaja $object
     * @param Parameters $params
     */
    public function create($object, $params = null)
    {
        if ($object->dogodek) {
            /** @var Dogodki $rep */
            $rep = $this->getEntityManager()->getRepository('Koledar\Entity\Dogodek');
            $rep->create($object->getDogodek(), $params);
        }
        parent::create($object, $params);
        $this->preracunajZaporedne($object);
    }

    /**
     * 
     * @param type $object
     * @param type $params
     */
    public function update($object, $params = null)
    {
        if ($object->dogodek) {
            /** @var Dogodki $rep */
            $rep = $this->getEntityManager()->getRepository('Koledar\Entity\Dogodek');
            $rep->update($object->getDogodek(), $params);
        }
        parent::update($object, $params); // TODO: Change the autogenerated stub      
        $this->preracunajZaporedne($object);
    }

    /**
     * Privzeti postopek brisanja
     * preverimo avtorizacijo in predpogoje brisanja
     *
     * @param Vaja $object
     */
    public function delete($object)
    {
        parent::delete($object); // TODO: Change the autogenerated stub
        if ($object->getDogodek()) {
            $this->getEntityManager()->remove($object->getDogodek());
        }
        $this->preracunajZaporedne($object);
    }

    /**
     * preračunaj zaporedne številke
     * 
     * @param type $object
     */
    private function preracunajZaporedne($object)
    {
        $vsevaje = $this->getEntityManager()->getRepository('Koledar\Entity\Vaja')
                ->findByUprizoritev($object->getUprizoritev());

        /*
         * upoštevajmo tudi vaje, ki še niso flush-ane,
         * a so že fazi kreiranja ali brisanja
         */
        $uow    = $this->getEntityManager()->getUnitOfWork();
        $schIns = $uow->getScheduledEntityInsertions();
        $schDel = $uow->getScheduledEntityDeletions();
        /*
         * upoštevamo tudi sezono, ki se bo kreirala
         */
        foreach ($schIns as $ins) {
            if ($ins instanceof \Koledar\Entity\Vaja) {
                $vsevaje[] = $ins;
            }
        }
        /*
         * upoštevamo tudi sezono, ki se bo izbrisala
         */
        foreach ($schDel as $del) {
            if ($del instanceof \Koledar\Entity\Vaja) {
                foreach ($vsevaje as $key => $v) {
                    if ($v->getId() == $del->getId()) {
                        unset($vsevaje[$key]);
                    }
                }
            }
        }

        /**
         * sort po datumu začetka
         */
        /*
         * $$ začasno izključimo, ker ne vemo,zakaj ni dogodka
         */
        usort($vsevaje, function($a, $b) {
            return $a->getDogodek()->getZacetek() < $b->getDogodek()->getZacetek() ? -1 : 1;
        });

        /*
         * $$ performančno bi se morda dalo optimirati
         */
        $i = 1;
        foreach ($vsevaje as $vaja) {
            $vaja->setZaporedna($i);
            $i++;
        }
    }

}
